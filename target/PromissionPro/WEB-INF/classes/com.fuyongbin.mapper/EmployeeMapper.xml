<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fuyongbin.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="com.fuyongbin.domain.Employee">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="inputtime" property="inputtime" jdbcType="TIMESTAMP"/>
        <result column="tel" property="tel" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="state" property="state" jdbcType="BIT"/>
        <result column="admin" property="admin" jdbcType="BIT"/>
        <association property="department" javaType="com.fuyongbin.domain.Department" columnPrefix="d_">
            <id column="id" property="id" jdbcType="INTEGER"/>
            <id column="name" property="name" jdbcType="VARCHAR"/>
        </association>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from employee
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <!--useGeneratedKeys在执行添加记录之后可以获取到数据库自动生成的主键ID。keyProperty对应的是Java对象的属性名-->
    <insert id="insert" parameterType="com.fuyongbin.domain.Employee" useGeneratedKeys="true" keyProperty="id">
    insert into employee (id, username,password, inputtime,
      tel, email, state, admin, 
      dep_id)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR},#{password,jdbcType=VARCHAR}, #{inputtime,jdbcType=TIMESTAMP},
      #{tel,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{state,jdbcType=BIT}, #{admin,jdbcType=BIT}, 
      #{department.id,jdbcType=INTEGER})
  </insert>

    <insert id="insertEmployeeAndRoleRel">
        insert into employee_role_rel values (#{eid},#{rid})
    </insert>
    <delete id="deleteRoleRel">
        delete from employee_role_rel where eid=#{id}
    </delete>
    <update id="updateByPrimaryKey" parameterType="com.fuyongbin.domain.Employee">
    update employee
    set username = #{username,jdbcType=VARCHAR},
      inputtime = #{inputtime,jdbcType=TIMESTAMP},
      tel = #{tel,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      admin = #{admin,jdbcType=BIT},
      dep_id = #{department.id}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <update id="updateState" parameterType="java.lang.Integer">
    update employee set state=false where id=#{id}
  </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select id, username, inputtime, tel, email, state, admin, dep_id
    from employee
    where id = #{id,jdbcType=INTEGER}
  </select>

    <sql id="where_sql">
        <where>
            <if test="keyword !=null and keyword !=''">
                and e.username like concat('%',#{keyword},'%')
                or e.tel like concat('%',#{keyword},'%')
                or e.email like concat('%',#{keyword},'%')
            </if>
        </where>
    </sql>
    <select id="selectAll" resultMap="BaseResultMap">
        select e.id, e.username, e.inputtime, e.tel, e.email, e.state, e.admin ,d.id as d_id ,d.`name` as d_name
        from employee as e
        LEFT JOIN department as d
        ON e.dep_id=d.id
        <include refid="where_sql"/>
        order by e.id desc
    </select>
    <select id="getEmployeeWithUsername" parameterType="java.lang.String" resultType="com.fuyongbin.domain.Employee">
        select * from employee where username=#{username}
    </select>
    <select id="getRolesById" resultType="java.lang.String">
        SELECT rnum FROM `employee_role_rel` as er
        LEFT JOIN role AS r
        on er.rid=r.rid
        WHERE er.eid=#{id}
    </select>
    <select id="getPermissionById" resultType="java.lang.String">
        SELECT DISTINCT p.presource FROM `role_permission_rel` as rp
        LEFT JOIN permission AS p
        on rp.pid=p.pid
        WHERE rid in (SELECT rid FROM employee_role_rel WHERE eid=#{id})
    </select>
</mapper>